/******************************************************************************/
/*** Domains ***/
/******************************************************************************/
/******************************************************************************/
/*** Generators ***/
/******************************************************************************/
CREATE GENERATOR GERADOR_CHAVE_SIS_EQUIPAMENTO;
CREATE GENERATOR GERADOR_CHAVE_SIS_PECA;
CREATE GENERATOR GERADOR_CHAVE_SIS_PRECO_PECA;
CREATE GENERATOR GERADOR_CHAVE_SIS_PRECO_TECNICO;
CREATE GENERATOR GERADOR_CHAVE_SIS_TERCEIRIZADO;
CREATE GENERATOR GERADOR_CODIGO_OS;
CREATE GENERATOR GERADOR_CODIGO_SETOR;
CREATE GENERATOR GERADOR_CODIGO_TECNICO;
CREATE GENERATOR GERADOR_CODIGO_USUARIO;
/******************************************************************************/
/*** Exceptions ***/
/******************************************************************************/
/******************************************************************************/
/*** Procedures ***/
/******************************************************************************/
SET TERM ^ ;
CREATE PROCEDURE ATUALIZAR_PECA(
CODIGO VARCHAR(20),
FABRICANTE VARCHAR(20),
NOME VARCHAR(40),
DESCRICAO VARCHAR(150),
CATEGORIA VARCHAR(25),
LOCAL VARCHAR(40),
QUANTIDADE_ESTOQUE INTEGER,
QUANTIDADE_MINIMA INTEGER,
PRECO DOUBLE PRECISION,
DATA DATE,
CHAVE_SISTEMA INTEGER)
AS
BEGIN
EXIT;
END^
CREATE PROCEDURE ATUALIZAR_TECNICO(
CODIGO VARCHAR(10),
NOME VARCHAR(25),
EMPRESA VARCHAR(25),
PRECO DOUBLE PRECISION,
DATA DATE)
AS
BEGIN
EXIT;
END^
CREATE PROCEDURE INSERIR_PECA(
51
CODIGO VARCHAR(20),
NOME_FABRICANTE VARCHAR(20),
NOME VARCHAR(40),
DESCRICAO VARCHAR(150),
CATEGORIA VARCHAR(25),
LOCAL VARCHAR(40),
QUANTIDADE_ESTOQUE INTEGER,
QUANTIDADE_MINIMA INTEGER,
PRECO DOUBLE PRECISION,
DATA DATE)
AS
BEGIN
EXIT;
END^
CREATE PROCEDURE INSERIR_TECNICO(
NOME VARCHAR(25),
EMPRESA VARCHAR(25),
PRECO DOUBLE PRECISION,
DATA DATE)
AS
BEGIN
EXIT;
END^
CREATE PROCEDURE REMOVER_PECA(
CODIGO_PECA VARCHAR(20),
NOME_PECA VARCHAR(40),
FABRICANTE_PECA VARCHAR(20))
AS
BEGIN
EXIT;
END^
CREATE PROCEDURE REMOVER_TECNICO(
CODIGO VARCHAR(10))
AS
BEGIN
EXIT;
END^
CREATE PROCEDURE TOTAL_OS(
CODIGO_OS VARCHAR(20),
DATA_INICIO DATE,
DATA_FIM DATE)
RETURNS (
TOTAL DOUBLE PRECISION)
AS
BEGIN
SUSPEND;
END^
SET TERM ; ^
/******************************************************************************/
/*** Tables and Views ***/
/******************************************************************************/
CREATE TABLE DADOS_PECA (
52
CODIGO VARCHAR(20) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
NOME VARCHAR(40) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
NOME_FABRICANTE VARCHAR(20) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
CHAVE_SISTEMA INTEGER,
DESCRICAO VARCHAR(150) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
CATEGORIA VARCHAR(25) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
LOCAL VARCHAR(40) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
QUANTIDADE_ESTOQUE INTEGER DEFAULT 0,
QUANTIDADE_MINIMA INTEGER DEFAULT 0,
IMAGEM BLOB SUB_TYPE 0 SEGMENT SIZE 80);
CREATE TABLE DADOS_TECNICO (
CODIGO VARCHAR(10) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
NOME VARCHAR(25) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
EMPRESA VARCHAR(25) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
FOTO BLOB SUB_TYPE 0 SEGMENT SIZE 80);
CREATE TABLE EMPRESA (
RAZAO_SOCIAL VARCHAR(20) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
NOME_FANTASIA VARCHAR(60) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
CHAVE_SISTEMA INTEGER,
ATIVIDADE VARCHAR(60) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
TELEFONE VARCHAR(60) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
ENDERECO VARCHAR(120) CHARACTER SET ISO8859_1 COLLATE ISO8859_1);
CREATE TABLE EQUIPAMENTO (
SERIAL VARCHAR(20) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
NOME_FABRICANTE VARCHAR(20) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
NOME_EQUIPAMENTO VARCHAR(40) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
LOCALIDADE_EQUIPAMENTO VARCHAR(40) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
CHAVE_SISTEMA INTEGER,
CATEGORIA VARCHAR(25) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
MODELO VARCHAR(25) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
IMAGEM BLOB SUB_TYPE 0 SEGMENT SIZE 80);
CREATE TABLE FABRICANTE (
NOME VARCHAR(20) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1);
CREATE TABLE ITEM_MANUTENCAO (
CODIGO VARCHAR(10) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
CODIGO_OS VARCHAR(20) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
CODIGO_PECA VARCHAR(20) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
NOME_PECA VARCHAR(40) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
FABRICANTE_PECA VARCHAR(20) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
QUANTIDADE INTEGER DEFAULT 1);
CREATE TABLE OS (
CODIGO VARCHAR(20) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
CODIGO_SETOR VARCHAR(10) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
SERIAL_EQUIPAMENTO VARCHAR(20) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
FABRICANTE_EQUIPAMENTO VARCHAR(20) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
TIPO VARCHAR(10) CHARACTER SET ISO8859_1 DEFAULT '' COLLATE ISO8859_1,
ESTADO VARCHAR(10) CHARACTER SET ISO8859_1 DEFAULT 'PENDENTE' COLLATE ISO8859_1,
DEFEITO VARCHAR(500) CHARACTER SET ISO8859_1 DEFAULT '' COLLATE ISO8859_1,
SOLUCAO VARCHAR(1500) CHARACTER SET ISO8859_1 DEFAULT '' COLLATE ISO8859_1,
NOME_RESPONSAVEL_ENTREGA VARCHAR(60) CHARACTER SET ISO8859_1 DEFAULT '' COLLATE ISO8859_1,
NOME_RESPONSAVEL_RECEBIMENTO VARCHAR(60) CHARACTER SET ISO8859_1 DEFAULT '' COLLATE ISO8859_1,
DATA_ABERTURA DATE,
HORARIO_ABERTURA TIME,
53
DATA_FECHAMENTO DATE,
HORARIO_FECHAMENTO TIME,
PRECO_TOTAL DOUBLE PRECISION DEFAULT 0);
CREATE TABLE PRECO_HORA_TRABALHO (
CODIGO_TECNICO VARCHAR(10) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
CHAVE_SISTEMA INTEGER NOT NULL,
PRECO DOUBLE PRECISION DEFAULT 0,
DATA DATE);
CREATE TABLE PRECO_UNITARIO_PECA (
CODIGO_PECA VARCHAR(20) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
NOME_PECA VARCHAR(40) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
FABRICANTE_PECA VARCHAR(20) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
CHAVE_SISTEMA INTEGER NOT NULL,
PRECO DOUBLE PRECISION DEFAULT 0,
DATA DATE);
CREATE TABLE RESPONSAVEL (
CODIGO_OS VARCHAR(20) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
CODIGO_TECNICO VARCHAR(10) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
PAPEL VARCHAR(6) CHARACTER SET ISO8859_1 DEFAULT 'ABRIR' NOT NULL COLLATE ISO8859_1,
QUANTIDADE_HORA_TRABALHO DOUBLE PRECISION DEFAULT 0);
CREATE TABLE SETOR (
CODIGO VARCHAR(10) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
NOME VARCHAR(25) CHARACTER SET ISO8859_1 COLLATE ISO8859_1);
CREATE TABLE USUARIO (
CODIGO INTEGER NOT NULL,
LOGIN VARCHAR(10) CHARACTER SET ISO8859_1 COLLATE ISO8859_1,
SENHA VARCHAR(10) CHARACTER SET ISO8859_1 COLLATE ISO8859_1);
CREATE TABLE UTILIZA_SERVICO (
CODIGO_OS VARCHAR(20) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
RAZAO_SOCIAL_EMPRESA VARCHAR(20) CHARACTER SET ISO8859_1 NOT NULL COLLATE ISO8859_1,
PRECO_SERVICO DOUBLE PRECISION DEFAULT 0);
/******************************************************************************/
/*** Primary keys ***/
/******************************************************************************/
ALTER TABLE DADOS_PECA ADD PRIMARY KEY (CODIGO, NOME, NOME_FABRICANTE);
ALTER TABLE DADOS_TECNICO ADD PRIMARY KEY (CODIGO);
ALTER TABLE EMPRESA ADD PRIMARY KEY (RAZAO_SOCIAL);
ALTER TABLE EQUIPAMENTO ADD PRIMARY KEY (SERIAL, NOME_FABRICANTE);
ALTER TABLE FABRICANTE ADD PRIMARY KEY (NOME);
ALTER TABLE ITEM_MANUTENCAO ADD PRIMARY KEY (CODIGO, CODIGO_OS, CODIGO_PECA, NOME_PECA,
FABRICANTE_PECA);
ALTER TABLE OS ADD PRIMARY KEY (CODIGO);
ALTER TABLE PRECO_HORA_TRABALHO ADD PRIMARY KEY (CODIGO_TECNICO, CHAVE_SISTEMA);
ALTER TABLE PRECO_UNITARIO_PECA ADD PRIMARY KEY (CHAVE_SISTEMA, FABRICANTE_PECA, CODIGO_PECA,
NOME_PECA);
ALTER TABLE RESPONSAVEL ADD PRIMARY KEY (CODIGO_OS, CODIGO_TECNICO, PAPEL);
ALTER TABLE SETOR ADD PRIMARY KEY (CODIGO);
ALTER TABLE USUARIO ADD PRIMARY KEY (CODIGO);
ALTER TABLE UTILIZA_SERVICO ADD PRIMARY KEY (CODIGO_OS, RAZAO_SOCIAL_EMPRESA);
/******************************************************************************/
54
/*** Unique constraints ***/
/******************************************************************************/
ALTER TABLE DADOS_PECA ADD UNIQUE (CHAVE_SISTEMA);
ALTER TABLE EMPRESA ADD UNIQUE (CHAVE_SISTEMA);
ALTER TABLE EQUIPAMENTO ADD UNIQUE (CHAVE_SISTEMA);
ALTER TABLE PRECO_HORA_TRABALHO ADD UNIQUE (CHAVE_SISTEMA);
ALTER TABLE PRECO_UNITARIO_PECA ADD UNIQUE (CHAVE_SISTEMA);
/******************************************************************************/
/*** Foreign keys ***/
/******************************************************************************/
ALTER TABLE DADOS_PECA ADD FOREIGN KEY (NOME_FABRICANTE) REFERENCES FABRICANTE (NOME) ON UPDATE
CASCADE;
ALTER TABLE EQUIPAMENTO ADD FOREIGN KEY (NOME_FABRICANTE) REFERENCES FABRICANTE (NOME) ON UPDATE
CASCADE;
ALTER TABLE ITEM_MANUTENCAO ADD FOREIGN KEY (CODIGO_OS) REFERENCES OS (CODIGO);
ALTER TABLE ITEM_MANUTENCAO ADD FOREIGN KEY (CODIGO_PECA, NOME_PECA, FABRICANTE_PECA)
REFERENCES DADOS_PECA (CODIGO, NOME, NOME_FABRICANTE) ON UPDATE CASCADE;
ALTER TABLE OS ADD FOREIGN KEY (CODIGO_SETOR) REFERENCES SETOR (CODIGO) ON UPDATE CASCADE;
ALTER TABLE OS ADD FOREIGN KEY (SERIAL_EQUIPAMENTO, FABRICANTE_EQUIPAMENTO) REFERENCES
EQUIPAMENTO (SERIAL, NOME_FABRICANTE) ON UPDATE CASCADE;
ALTER TABLE PRECO_HORA_TRABALHO ADD FOREIGN KEY (CODIGO_TECNICO) REFERENCES DADOS_TECNICO
(CODIGO) ON UPDATE CASCADE;
ALTER TABLE PRECO_UNITARIO_PECA ADD FOREIGN KEY (CODIGO_PECA, NOME_PECA, FABRICANTE_PECA)
REFERENCES DADOS_PECA (CODIGO, NOME, NOME_FABRICANTE) ON UPDATE CASCADE;
ALTER TABLE RESPONSAVEL ADD FOREIGN KEY (CODIGO_OS) REFERENCES OS (CODIGO);
ALTER TABLE RESPONSAVEL ADD FOREIGN KEY (CODIGO_TECNICO) REFERENCES DADOS_TECNICO (CODIGO) ON
UPDATE CASCADE;
ALTER TABLE UTILIZA_SERVICO ADD FOREIGN KEY (CODIGO_OS) REFERENCES OS (CODIGO);
ALTER TABLE UTILIZA_SERVICO ADD FOREIGN KEY (RAZAO_SOCIAL_EMPRESA) REFERENCES EMPRESA
(RAZAO_SOCIAL) ON UPDATE CASCADE;
/******************************************************************************/
/*** Check constraints ***/
/******************************************************************************/
/******************************************************************************/
/*** Indices ***/
/******************************************************************************/
/******************************************************************************/
/*** Triggers ***/
/******************************************************************************/
SET TERM ^ ;
CREATE TRIGGER ATUALIZA_ESTOQUE FOR ITEM_MANUTENCAO
ACTIVE BEFORE INSERT OR UPDATE OR DELETE POSITION 0
AS
DECLARE VARIABLE estoque INTEGER;
BEGIN
SELECT quantidade_estoque
FROM DADOS_PECA
WHERE codigo = NEW.codigo_peca AND nome = NEW.nome_peca AND nome_fabricante = NEW.fabricante_peca
INTO :estoque;
IF(OLD.quantidade IS NULL)THEN
UPDATE DADOS_PECA
SET quantidade_estoque = :estoque - NEW.quantidade
WHERE codigo = NEW.codigo_peca AND nome = NEW.nome_peca AND nome_fabricante = NEW.fabricante_peca;
ELSE UPDATE DADOS_PECA
SET quantidade_estoque = :estoque + OLD.quantidade - NEW.quantidade
55
WHERE codigo = NEW.codigo_peca AND nome = NEW.nome_peca AND nome_fabricante = NEW.fabricante_peca;
IF (NEW.quantidade IS NULL)THEN BEGIN
SELECT quantidade_estoque
FROM DADOS_PECA
WHERE codigo = OLD.codigo_peca AND nome = OLD.nome_peca AND nome_fabricante = OLD.fabricante_peca
INTO :estoque;
UPDATE DADOS_PECA
SET quantidade_estoque = :estoque + OLD.quantidade
WHERE codigo = OLD.codigo_peca AND nome = OLD.nome_peca AND nome_fabricante = OLD.fabricante_peca;
END
END
^
CREATE TRIGGER GERA_CHAVE_SIS_EQUIPAMENTO FOR EQUIPAMENTO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
NEW.chave_sistema = GEN_ID(GERADOR_CHAVE_SIS_EQUIPAMENTO, 1);
END
^
CREATE TRIGGER GERA_CHAVE_SIS_PECA FOR DADOS_PECA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
NEW.chave_sistema = GEN_ID(GERADOR_CHAVE_SIS_PECA, 1);
END
^
CREATE TRIGGER GERA_CHAVE_SIS_PRE_PECA FOR PRECO_UNITARIO_PECA
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
NEW.chave_sistema = GEN_ID(GERADOR_CHAVE_SIS_PRECO_PECA, 1);
END
^
CREATE TRIGGER GERA_CHAVE_SIS_PRE_TECNICO FOR PRECO_HORA_TRABALHO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
NEW.chave_sistema = GEN_ID(GERADOR_CHAVE_SIS_PRECO_TECNICO, 1);
END
^
CREATE TRIGGER GERA_CHAVE_SIS_TERCEIRIZADO FOR EMPRESA
ACTIVE BEFORE INSERT POSITION 0
AS
56
BEGIN
NEW.chave_sistema = GEN_ID(GERADOR_CHAVE_SIS_TERCEIRIZADO, 1);
END
^
CREATE TRIGGER GERA_CODIGO_OS FOR OS
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
NEW.codigo = GEN_ID(GERADOR_CODIGO_OS, 1);
END
^
CREATE TRIGGER GERA_CODIGO_SETOR FOR SETOR
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
NEW.codigo = GEN_ID(GERADOR_CODIGO_SETOR, 1);
END
^
CREATE TRIGGER GERA_CODIGO_TECNICO FOR DADOS_TECNICO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
NEW.codigo = GEN_ID(GERADOR_CODIGO_TECNICO, 1);
END
^
CREATE TRIGGER GERA_CODIGO_USUARIO FOR USUARIO
ACTIVE BEFORE INSERT POSITION 0
AS
BEGIN
NEW.codigo = GEN_ID(GERADOR_CODIGO_USUARIO, 1);
END
^
SET TERM ; ^
/******************************************************************************/
/*** Procedures ***/
/******************************************************************************/
SET TERM ^ ;
ALTER PROCEDURE ATUALIZAR_PECA(
CODIGO VARCHAR(20),
FABRICANTE VARCHAR(20),
NOME VARCHAR(40),
57
DESCRICAO VARCHAR(150),
CATEGORIA VARCHAR(25),
LOCAL VARCHAR(40),
QUANTIDADE_ESTOQUE INTEGER,
QUANTIDADE_MINIMA INTEGER,
PRECO DOUBLE PRECISION,
DATA DATE,
CHAVE_SISTEMA INTEGER)
AS
declare variable preco_atual double precision;
declare variable qt_fabricante integer;
BEGIN
SELECT COUNT(nome)
FROM FABRICANTE
WHERE nome = :fabricante
INTO :qt_fabricante;
IF(:qt_fabricante = 0) THEN
INSERT INTO FABRICANTE(nome)
VALUES(:fabricante);
UPDATE dados_peca
SET codigo = :codigo, nome = :nome, nome_fabricante = :fabricante,
descricao = :descricao, categoria = :categoria, local = :local, quantidade_estoque = :quantidade_estoque,
quantidade_minima = :quantidade_minima
WHERE chave_sistema = :chave_sistema;
SELECT preco
FROM PRECO_UNITARIO_PECA
WHERE chave_sistema IN (SELECT MAX(chave_sistema)
FROM PRECO_UNITARIO_PECA
WHERE codigo_peca = :codigo)
INTO :preco_atual;
IF (:preco_atual != :preco) THEN
INSERT INTO PRECO_UNITARIO_PECA(codigo_peca, nome_peca, fabricante_peca, preco, data)
VALUES(:codigo, :nome, :fabricante, :preco, :data);
SUSPEND;
END^
ALTER PROCEDURE ATUALIZAR_TECNICO(
CODIGO VARCHAR(10),
NOME VARCHAR(25),
EMPRESA VARCHAR(25),
PRECO DOUBLE PRECISION,
DATA DATE)
AS
declare variable preco_atual double precision;
BEGIN
UPDATE dados_tecnico
SET nome = :nome, empresa = :empresa
WHERE codigo = :codigo;
SELECT preco
FROM PRECO_HORA_TRABALHO
WHERE chave_sistema IN (SELECT MAX(chave_sistema)
FROM PRECO_HORA_TRABALHO
58
WHERE codigo_tecnico = :codigo)
INTO :preco_atual;
IF (:preco_atual != :preco) THEN
INSERT INTO PRECO_HORA_TRABALHO(codigo_tecnico, preco, data)
VALUES(:codigo, :preco, :data);
SUSPEND;
END^
ALTER PROCEDURE INSERIR_PECA(
CODIGO VARCHAR(20),
NOME_FABRICANTE VARCHAR(20),
NOME VARCHAR(40),
DESCRICAO VARCHAR(150),
CATEGORIA VARCHAR(25),
LOCAL VARCHAR(40),
QUANTIDADE_ESTOQUE INTEGER,
QUANTIDADE_MINIMA INTEGER,
PRECO DOUBLE PRECISION,
DATA DATE)
AS
BEGIN
INSERT INTO DADOS_PECA (codigo, nome_fabricante, nome, descricao, categoria, local, quantidade_estoque,
quantidade_minima)
VALUES(:codigo, :nome_fabricante, :nome, :descricao, :categoria, :local, :quantidade_estoque, :quantidade_minima);
INSERT INTO PRECO_UNITARIO_PECA(codigo_peca, nome_peca, fabricante_peca, preco, data)
VALUES(:codigo, :nome, :nome_fabricante, :preco, :data);
SUSPEND;
END^
ALTER PROCEDURE INSERIR_TECNICO(
NOME VARCHAR(25),
EMPRESA VARCHAR(25),
PRECO DOUBLE PRECISION,
DATA DATE)
AS
declare variable codigo_tecnico varchar(10);
BEGIN
INSERT INTO DADOS_TECNICO(nome, empresa)
VALUES(:nome, :empresa);
SELECT codigo
FROM DADOS_TECNICO
WHERE nome = :nome AND empresa = :empresa
INTO :codigo_tecnico;
INSERT INTO PRECO_HORA_TRABALHO(codigo_tecnico, preco, data)
VALUES(:codigo_tecnico, :preco, :data);
SUSPEND;
END^
ALTER PROCEDURE REMOVER_PECA(
CODIGO_PECA VARCHAR(20),
NOME_PECA VARCHAR(40),
59
FABRICANTE_PECA VARCHAR(20))
AS
BEGIN
DELETE FROM preco_unitario_peca
WHERE codigo_peca = :codigo_peca AND nome_peca = :nome_peca AND fabricante_peca = :fabricante_peca;
DELETE FROM dados_peca
WHERE codigo = :codigo_peca AND nome = :nome_peca AND nome_fabricante = :fabricante_peca;
SUSPEND;
END^
ALTER PROCEDURE REMOVER_TECNICO(
CODIGO VARCHAR(10))
AS
BEGIN
DELETE FROM PRECO_HORA_TRABALHO
WHERE codigo_tecnico = :codigo;
DELETE FROM DADOS_TECNICO
WHERE codigo = :codigo;
SUSPEND;
END^
ALTER PROCEDURE TOTAL_OS(
CODIGO_OS VARCHAR(20),
DATA_INICIO DATE,
DATA_FIM DATE)
RETURNS (
TOTAL DOUBLE PRECISION)
AS
declare variable cd_peca varchar(20);
declare variable fab_peca varchar(20);
declare variable nm_peca varchar(25);
declare variable preco_peca double precision;
declare variable quantidade integer;
declare variable total_peca double precision;
declare variable cd_tecnico varchar(10);
declare variable preco_hora_tecnico double precision;
declare variable qt_hora_trabalho integer;
declare variable total_responsavel double precision;
declare variable preco_servico double precision;
declare variable total_servico double precision;
BEGIN
total_servico = 0;
total_responsavel = 0;
total_peca = 0;
total = 0;
FOR SELECT preco_servico
FROM UTILIZA_SERVICO
WHERE codigo_os = :codigo_os
INTO :preco_servico
DO BEGIN
60
IF(:preco_servico IS NOT NULL) THEN
total_servico = total_servico + preco_servico;
END
FOR SELECT codigo_tecnico, quantidade_hora_trabalho
FROM RESPONSAVEL
WHERE codigo_os = :codigo_os
INTO :cd_tecnico, :qt_hora_trabalho
DO BEGIN
SELECT preco
FROM preco_hora_trabalho
WHERE chave_sistema IN (SELECT MAX(chave_sistema)
FROM PRECO_HORA_TRABALHO
WHERE codigo_tecnico = :cd_tecnico and (data BETWEEN :data_inicio AND :data_fim))
INTO :preco_hora_tecnico;
total_responsavel = total_responsavel + (preco_hora_tecnico * qt_hora_trabalho);
END
FOR SELECT codigo_peca, nome_peca, fabricante_peca, quantidade
FROM ITEM_MANUTENCAO
WHERE codigo_os = :codigo_os
INTO :cd_peca, :nm_peca, :fab_peca, :quantidade
DO BEGIN
SELECT preco
FROM PRECO_UNITARIO_PECA
WHERE codigo_peca = :cd_peca AND nome_peca = :nm_peca AND fabricante_peca = :fab_peca AND (data BETWEEN
:data_inicio AND :data_fim)
INTO :preco_peca;
IF(:preco_peca IS NOT NULL) THEN
total_peca = total_peca + (quantidade * preco_peca);
END
total = total_peca + total_responsavel + total_servico;
SUSPEND;
END^
SET TERM ; ^
